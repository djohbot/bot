"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.permission = exports.options = void 0;
const builders_1 = require("@discordjs/builders");
exports.options = new builders_1.SlashCommandBuilder()
    .setName("flows")
    .setDescription("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–æ–≤.")
    .addSubcommand((c) => c.setName("create").setDescription("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫."))
    .addSubcommand((c) => c.setName("list").setDescription("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –ø–æ—Ç–æ–∫–æ–≤."))
    .addSubcommand((c) => c.setName("delete").setDescription("–£–¥–∞–ª–∏—Ç—å —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫.")
    .addStringOption((o) => o.setName("id").setDescription("Id –ø–æ—Ç–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. (/flows list)").setRequired(true)))
    .toJSON();
exports.permission = 2;
const discord_js_1 = require("discord.js");
const constants_1 = require("../constants/");
const walkthrough_1 = require("../constants/flows/walkthrough");
const flows_1 = __importDefault(require("../constants/flows/"));
const Util_1 = __importDefault(require("../util/Util"));
const { limitFlows, limitTriggers, limitActions } = flows_1.default;
const run = async (interaction) => {
    const gdb = await Util_1.default.database.guild(interaction.guild.id);
    const global = await Util_1.default.database.global();
    const cmd = interaction.options.getSubcommand();
    const { flows } = gdb.get();
    if (cmd == "create") {
        if (Object.keys(flows).length >= limitFlows)
            return await interaction.reply({
                content: `‚ùå –í—ã –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ ${limitFlows} –ø–æ—Ç–æ–∫–æ–≤.`,
                ephemeral: true
            });
        if (!interaction.guild.me.permissions.has("MANAGE_CHANNELS"))
            return await interaction.reply({
                content: "‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç—É –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤.",
                ephemeral: true
            });
        const flowId = (0, constants_1.generateID)();
        let channel;
        try {
            channel = await interaction.guild.channels.create("dob-flow-editor", {
                permissionOverwrites: [{
                        id: interaction.client.user.id,
                        allow: [
                            "VIEW_CHANNEL",
                            "SEND_MESSAGES",
                            "MANAGE_MESSAGES",
                            "EMBED_LINKS",
                            "READ_MESSAGE_HISTORY"
                        ]
                    }, {
                        id: interaction.user.id,
                        allow: [
                            "VIEW_CHANNEL",
                            "SEND_MESSAGES",
                            "READ_MESSAGE_HISTORY"
                        ]
                    }, {
                        id: interaction.guild.roles.everyone,
                        deny: [
                            "VIEW_CHANNEL"
                        ]
                    }]
            });
        }
        catch {
            return await interaction.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞.");
        }
        ;
        await interaction.reply({
            content: `üåÄ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ${channel} –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞.`,
            ephemeral: true
        });
        const newFlow = {
            triggers: Array(limitTriggers).fill(null),
            actions: Array(limitActions).fill(null)
        };
        const generateEmbed = async () => ({
            title: "üåÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞",
            description: [
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø–æ—Ç–æ–∫–æ–≤! –Ø –ø–æ–º–æ–≥—É –í–∞–º –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ.",
                "–¢—Ä–∏–≥–≥–µ—Ä - —Ç–æ, —á—Ç–æ –∑–∞–¥–µ–π—Å—Ç–≤—É–µ—Ç \"–¥–µ–π—Å—Ç–≤–∏–µ\". –î–µ–π—Å—Ç–≤–∏–µ, —ç—Ç–æ —Ç–æ, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞.",
                `–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å ${limitTriggers} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ ${limitActions} –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø–æ—Ç–æ–∫.`
            ].join("\n\n"),
            fields: [{
                    name: "–ö–æ–º–∞–Ω–¥—ã",
                    value: [
                        "‚Ä¢ `edit <trigger –∏–ª–∏ action> <—Å–ª–æ—Ç>`: –ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
                        "‚Ä¢ `save`: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ç–æ–∫ –∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª.",
                        "‚Ä¢ `cancel`: –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª."
                    ].join("\n")
                }, {
                    name: "–î–µ–π—Å—Ç–≤–∏—è",
                    value: cutFieldValue(await Promise.all(newFlow.actions.map(async (action, index) => `${index + 1} - ${action ? `${await (0, walkthrough_1.formatExplanation)(action)}` : "**–ü—É—Å—Ç–æ**"}`))),
                    inline: true
                }, {
                    name: "–¢—Ä–∏–≥–≥–µ—Ä—ã",
                    value: cutFieldValue(await Promise.all(newFlow.triggers.map(async (trigger, index) => `${index + 1} - ${trigger ? `${await (0, walkthrough_1.formatExplanation)(trigger)}` : "**–ü—É—Å—Ç–æ**"}`))),
                    inline: true
                }]
        });
        const pinned = await channel.send("–ó–∞–≥—Ä—É–∑–∫–∞...");
        await pinned.pin();
        const success = await (0, walkthrough_1.flowWalkthrough)(interaction.guild, interaction.user, channel, newFlow, generateEmbed, pinned);
        channel.delete();
        if (success) {
            gdb.setOnObject("flows", flowId, newFlow);
            global.addToArray("generatedIds", flowId);
            await interaction.editReply("‚úÖ –ü–æ—Ç–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.");
        }
        else
            await interaction.editReply("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
    }
    else if (cmd === "delete") {
        const flowId = interaction.options.getString("id");
        if (!flows[flowId])
            return await interaction.reply({ content: "‚ùå –≠—Ç–æ—Ç –ø–æ—Ç–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", ephemeral: true });
        gdb.removeFromObject("flows", flowId);
        global.removeFromArray("generatedIds", flowId);
        await interaction.reply({
            content: `‚úÖ –ü–æ—Ç–æ–∫ \`${flowId}\` –±—ã–ª —É–¥–∞–ª—ë–Ω.`
        });
    }
    else if (cmd === "list") {
        const flowIds = Object.keys(flows).slice(0, limitFlows);
        if (flowIds.length) {
            await interaction.reply({
                embeds: [{
                        title: "–°–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤",
                        description: `–£ –í–∞—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${flowIds.length} –∏–∑ ${limitFlows} –ø–æ—Ç–æ–∫–æ–≤.`,
                        fields: await Promise.all(flowIds.map(async (flowId) => {
                            const val = ([
                                "**–¢—Ä–∏–≥–≥–µ—Ä—ã:**",
                                await formatTriggers(flows[flowId]),
                                "**–î–µ–π—Å—Ç–≤–∏—è:**",
                                await formatActions(flows[flowId])
                            ].join("\n").split("\n").map((l) => `> ${l}`).join("\n") + "\n** **");
                            return ({
                                name: `–ü–æ—Ç–æ–∫ \`${flowId}\``,
                                value: cutFieldValue(val),
                                inline: true
                            });
                        }))
                    }],
                components: [
                    new discord_js_1.MessageActionRow().setComponents([
                        new discord_js_1.MessageButton().setCustomId("reply:delete").setStyle("DANGER").setEmoji("üóë")
                    ])
                ]
            });
        }
        else
            await interaction.reply({ content: "‚ùå –ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤.", ephemeral: true });
    }
    ;
};
exports.run = run;
const cutFieldValue = (value) => {
    if (Array.isArray(value))
        value = value.join("\n");
    if (value.length > 1024)
        return value.slice(0, 1014) + " **[...]**";
    else
        return value;
};
const formatTriggers = async (flow) => {
    const formatted = await Promise.all(flow.triggers.slice(0, limitTriggers).filter((t) => t).map(async (trigger) => `‚Ä¢ ${await (0, walkthrough_1.formatExplanation)(trigger)}`));
    return formatted.join("\n");
};
const formatActions = async (flow) => {
    const formatted = await Promise.all(flow.actions.slice(0, limitActions).filter((a) => a).map(async (action) => `‚Ä¢ ${await (0, walkthrough_1.formatExplanation)(action)}`));
    return formatted.join("\n");
};
